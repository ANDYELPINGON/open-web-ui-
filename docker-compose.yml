version: '3.8'

services:
  # Aplicación principal Open WebUI
  open-webui:
    build: .
    container_name: open-webui
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-auto-generated-secret-key}
      - DATABASE_URL=postgresql://webui_user:webui_password@postgres:5432/webui_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    volumes:
      - webui_data:/app/backend/data
      - webui_uploads:/app/backend/uploads
      - webui_logs:/app/backend/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - webui_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: webui_postgres
    environment:
      - POSTGRES_DB=webui_db
      - POSTGRES_USER=webui_user
      - POSTGRES_PASSWORD=webui_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - webui_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U webui_user -d webui_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: webui_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - webui_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: webui_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - webui_static:/var/www/static:ro
    depends_on:
      - open-webui
    restart: unless-stopped
    networks:
      - webui_network
    profiles:
      - with-nginx

  # Ollama para modelos locales (opcional)
  ollama:
    image: ollama/ollama:latest
    container_name: webui_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    networks:
      - webui_network
    profiles:
      - with-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Monitoring con Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: webui_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - webui_network
    profiles:
      - monitoring

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: webui_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - webui_network
    profiles:
      - monitoring

volumes:
  webui_data:
    driver: local
  webui_uploads:
    driver: local
  webui_logs:
    driver: local
  webui_static:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  webui_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16