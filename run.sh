#!/bin/bash

# üöÄ Open WebUI - Script de Inicio Mejorado
# Este script inicia Open WebUI con configuraciones optimizadas

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir con colores
print_color() {
    printf "${1}${2}${NC}\n"
}

# Banner de inicio
print_color $CYAN "
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù
"

print_color $GREEN "üöÄ Iniciando Open WebUI..."
echo

# Verificar si estamos en el directorio correcto
if [ ! -f "main.py" ]; then
    print_color $RED "‚ùå Error: No se encontr√≥ main.py"
    print_color $RED "   Aseg√∫rate de ejecutar este script desde el directorio ra√≠z del proyecto"
    exit 1
fi

# Detectar sistema operativo
OS="unknown"
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    OS="linux"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    OS="macos"
elif [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "win32" ]]; then
    OS="windows"
fi

print_color $BLUE "üñ•Ô∏è  Sistema detectado: $OS"

# Activar entorno virtual si existe
if [ -d "venv" ]; then
    print_color $YELLOW "üì¶ Activando entorno virtual..."
    
    if [ "$OS" = "windows" ]; then
        source venv/Scripts/activate
    else
        source venv/bin/activate
    fi
    
    print_color $GREEN "‚úÖ Entorno virtual activado"
else
    print_color $YELLOW "‚ö†Ô∏è  No se encontr√≥ entorno virtual. Usando Python del sistema."
fi

# Cargar variables de entorno
if [ -f ".env" ]; then
    print_color $YELLOW "‚öôÔ∏è  Cargando configuraci√≥n desde .env..."
    export $(cat .env | grep -v '^#' | grep -v '^$' | xargs)
    print_color $GREEN "‚úÖ Configuraci√≥n cargada"
else
    print_color $YELLOW "‚ö†Ô∏è  No se encontr√≥ archivo .env. Usando configuraci√≥n por defecto."
fi

# Configurar variables por defecto
export PORT=${PORT:-8080}
export HOST=${HOST:-0.0.0.0}
export LOG_LEVEL=${LOG_LEVEL:-INFO}
export UVICORN_WORKERS=${UVICORN_WORKERS:-1}

# Verificar dependencias cr√≠ticas
print_color $YELLOW "üîç Verificando dependencias..."

python -c "
import sys
try:
    import fastapi, uvicorn, pydantic
    print('‚úÖ Dependencias principales OK')
except ImportError as e:
    print(f'‚ùå Error: {e}')
    print('üí° Ejecuta: pip install -r requirements.txt')
    sys.exit(1)
" || exit 1

# Verificar que se puede cargar la aplicaci√≥n
python -c "
import sys
sys.path.append('.')
try:
    from main import app
    print('‚úÖ Aplicaci√≥n cargada correctamente')
except Exception as e:
    print(f'‚ùå Error al cargar aplicaci√≥n: {e}')
    sys.exit(1)
" || exit 1

# Crear directorios necesarios
print_color $YELLOW "üìÅ Verificando directorios..."
mkdir -p data logs uploads static temp
print_color $GREEN "‚úÖ Directorios verificados"

# Verificar base de datos
if [ ! -f "data/webui.db" ] && [[ "${DATABASE_URL:-}" == *"sqlite"* ]]; then
    print_color $YELLOW "üóÑÔ∏è  Inicializando base de datos SQLite..."
    python -c "
import sys
sys.path.append('.')
try:
    from main import init_db
    init_db()
    print('‚úÖ Base de datos inicializada')
except Exception as e:
    print(f'‚ö†Ô∏è  Advertencia: {e}')
"
fi

# Mostrar informaci√≥n de inicio
echo
print_color $CYAN "üìã Informaci√≥n de inicio:"
print_color $BLUE "   üåê URL: http://${HOST}:${PORT}"
print_color $BLUE "   üìö API Docs: http://${HOST}:${PORT}/docs"
print_color $BLUE "   üìñ ReDoc: http://${HOST}:${PORT}/redoc"
print_color $BLUE "   üîß Workers: ${UVICORN_WORKERS}"
print_color $BLUE "   üìä Log Level: ${LOG_LEVEL}"

# Verificar si el puerto est√° disponible
if command -v lsof >/dev/null 2>&1; then
    if lsof -Pi :${PORT} -sTCP:LISTEN -t >/dev/null; then
        print_color $RED "‚ö†Ô∏è  El puerto ${PORT} ya est√° en uso"
        print_color $YELLOW "üí° Puedes cambiar el puerto con: export PORT=8081"
        read -p "¬øContinuar de todas formas? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
fi

echo
print_color $GREEN "üöÄ Iniciando servidor..."
print_color $YELLOW "üõë Presiona Ctrl+C para detener"
echo

# Funci√≥n para manejar se√±ales
cleanup() {
    echo
    print_color $YELLOW "üõë Deteniendo servidor..."
    print_color $GREEN "üëã ¬°Hasta luego!"
    exit 0
}

trap cleanup SIGINT SIGTERM

# Determinar comando de Python
PYTHON_CMD="python"
if command -v python3 >/dev/null 2>&1; then
    PYTHON_CMD="python3"
fi

# Opciones adicionales para desarrollo
EXTRA_ARGS=""
if [ "${DEVELOPMENT_MODE:-false}" = "true" ]; then
    EXTRA_ARGS="--reload --reload-dir . --reload-exclude '*.pyc' --reload-exclude '__pycache__'"
    print_color $YELLOW "üîß Modo desarrollo activado (auto-reload)"
fi

# Iniciar aplicaci√≥n
if [ "${UVICORN_WORKERS}" -gt 1 ]; then
    # Modo producci√≥n con m√∫ltiples workers
    exec $PYTHON_CMD -m uvicorn main:app \
        --host "${HOST}" \
        --port "${PORT}" \
        --workers "${UVICORN_WORKERS}" \
        --log-level "${LOG_LEVEL,,}" \
        --access-log \
        --forwarded-allow-ips '*'
else
    # Modo desarrollo o single worker
    exec $PYTHON_CMD -m uvicorn main:app \
        --host "${HOST}" \
        --port "${PORT}" \
        --log-level "${LOG_LEVEL,,}" \
        --access-log \
        --forwarded-allow-ips '*' \
        ${EXTRA_ARGS}
fi